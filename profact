<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Procesamiento de Divisas con Múltiples Clientes (Formato Mexicano)</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #f4f4f4;
      margin: 0;
      padding: 20px;
    }
    .container {
      max-width: 1000px;
      margin: auto;
      background: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    h1, h2, h3 {
      text-align: center;
    }
    .form-group {
      margin-bottom: 15px;
    }
    input[type="file"], input[type="number"], input[type="text"] {
      width: 100%;
      padding: 8px;
      box-sizing: border-box;
    }
    .currency-section {
      border: 1px solid #ccc;
      margin-bottom: 15px;
      padding: 10px;
      border-radius: 4px;
    }
    .currency-header {
      background: #e9ecef;
      padding: 8px;
      border-radius: 4px;
      margin-bottom: 10px;
    }
    .clientEntries {
      margin-bottom: 10px;
    }
    .client-entry {
      display: flex;
      gap: 10px;
      margin-bottom: 5px;
      align-items: center;
      flex-wrap: wrap;
    }
    .client-entry input {
      padding: 5px;
      width: 120px;
    }
    .client-entry button {
      background: #dc3545;
      color: #fff;
      border: none;
      padding: 5px 8px;
      cursor: pointer;
      border-radius: 4px;
    }
    .addClientBtn {
      background: #28a745;
      color: #fff;
      border: none;
      padding: 5px 10px;
      cursor: pointer;
      border-radius: 4px;
      margin-bottom: 10px;
    }
    button.processBtn {
      background: #007BFF;
      color: #fff;
      border: none;
      padding: 10px;
      cursor: pointer;
      font-size: 16px;
      border-radius: 4px;
      width: 100%;
      margin-top: 10px;
    }
    button.processBtn:hover {
      background: #0056b3;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 15px;
    }
    table, th, td {
      border: 1px solid #ccc;
    }
    th, td {
      padding: 8px;
      text-align: center;
    }
    a {
      text-decoration: none;
      color: #007BFF;
      font-weight: bold;
    }
    .download-links p, .info {
      text-align: center;
    }
    .info {
      font-size: 14px;
      margin-top: 10px;
      color: #555;
    }
  </style>
  <!-- Se incluye la librería SheetJS vía CDN -->
  <script src="https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js"></script>
</head>
<body>
  <div class="container">
    <h1>Procesamiento de Divisas con Múltiples Clientes</h1>
    <div class="form-group">
      <label for="excelFile">Selecciona tu archivo Excel:</label>
      <input type="file" id="excelFile" accept=".xlsx, .xls">
    </div>
    <div id="fileStatus" class="form-group"></div>
    <div class="info">
      Si en alguna divisa no se agregan clientes se usará el monto total para el público general.<br>
      Para cada divisa puedes agregar varios clientes (ingresando nombre, cantidad y precio).<br>
      Se calculará el total facturado, el monto restante, el nuevo tipo de cambio y la factura para el público.<br>
      Toda la información se mostrará y exportará con formato mexicano (ejemplo: $19,525.00).
    </div>
    <!-- Se generarán las secciones por divisa -->
    <div id="currencyContainer"></div>
    
    <button id="processAllBtn" class="processBtn">Procesar Todas las Divisas</button>
    
    <!-- Resumen de resultados y encabezados en la página -->
    <div id="resultSummary"></div>
    <!-- Tabla de clientes -->
    <div id="clientTableContainer"></div>
    
    <!-- Enlaces de descarga -->
    <div id="downloadLinks" class="download-links"></div>
  </div>
  
  <script>
    // Función auxiliar para convertir números en formato mexicano (ej. "1.234,56" a 1234.56)
    function parseMexicanNumber(val) {
      if (typeof val === 'number') return val;
      if (typeof val === 'string') {
        let cleaned = val.replace(/\s/g, '').replace(/\./g, '').replace(',', '.');
        let num = parseFloat(cleaned);
        return isNaN(num) ? 0 : num;
      }
      return 0;
    }

    // Mapeo de cada divisa a las celdas del Excel
    const currencyMapping = {
      "DOLARES AMERICANOS": { divisa: "E19", mn: "F19" },
      "CANADA": { divisa: "E47", mn: "F47" },
      "SUIZA": { divisa: "E61", mn: "F61" },
      "AUSTRALIA": { divisa: "E75", mn: "F75" },
      "EURO": { divisa: "E89", mn: "F89" },
      "BRASIL": { divisa: "E103", mn: "F103" },
      "INGLATERRA": { divisa: "E117", mn: "F117" },
      "JAPON": { divisa: "E131", mn: "F131" },
      "CUBA CONVERTIBLE": { divisa: "E145", mn: "F145" },
      "MORRALLA AMERICANA": { divisa: "E159", mn: "F159" },
      "MORRALLA CANADA": { divisa: "E173", mn: "F173" },
      "MORRALLA EURO": { divisa: "E187", mn: "F187" },
      "MORRALLA STERLINA": { divisa: "E201", mn: "F201" },
      "CENTENARIO": { divisa: "E215", mn: "F215" },
      "PESOS ARGENTINOS": { divisa: "E229", mn: "F229" },
      "COLOMBIA": { divisa: "E243", mn: "F243" },
      "BELICE": { divisa: "E257", mn: "F257" },
      "CHILE": { divisa: "E271", mn: "F271" },
      "CHINA": { divisa: "E285", mn: "F285" },
      "DINAMARCA": { divisa: "E299", mn: "F299" },
      "GUATEMALA": { divisa: "E313", mn: "F313" },
      "HONG KONG": { divisa: "E327", mn: "F327" },
      "ISRAEL": { divisa: "E341", mn: "F341" },
      "NORUEGA": { divisa: "E355", mn: "F355" },
      "PERU": { divisa: "E369", mn: "F369" },
      "RUSIA": { divisa: "E383", mn: "F383" },
      "SUECIA": { divisa: "E397", mn: "F397" },
      "ESCOCIA": { divisa: "E411", mn: "F411" },
      "NUEVA ZELANDA": { divisa: "E425", mn: "F425" },
      "COREA DEL SUR": { divisa: "E439", mn: "F439" },
      "COSTA RICA": { divisa: "E453", mn: "F453" },
      "TURQUIA": { divisa: "E467", mn: "F467" }
    };

    let workbook, sheet;

    // Al cargar el archivo Excel se lee y se construyen las secciones por divisa
    document.getElementById('excelFile').addEventListener('change', (e) => {
      const file = e.target.files[0];
      if (!file) return;
      const reader = new FileReader();
      reader.onload = function(e) {
        const data = new Uint8Array(e.target.result);
        workbook = XLSX.read(data, { type: 'array' });
        // Se asume que la hoja a procesar es la primera
        sheet = workbook.Sheets[workbook.SheetNames[0]];
        document.getElementById('fileStatus').innerText = "Archivo Excel cargado correctamente.";
        buildCurrencySections();
      };
      reader.readAsArrayBuffer(file);
    });

    // Construir secciones por divisa (con totales originales y espacio para clientes)
    function buildCurrencySections() {
      const container = document.getElementById('currencyContainer');
      container.innerHTML = "";
      for (const currency in currencyMapping) {
        const mapping = currencyMapping[currency];
        const cellDivisa = sheet[mapping.divisa];
        const cellMN = sheet[mapping.mn];
        const originalDivisa = cellDivisa ? parseMexicanNumber(cellDivisa.v) : 0;
        const originalMN = cellMN ? parseMexicanNumber(cellMN.v) : 0;

        const section = document.createElement('div');
        section.classList.add('currency-section');
        section.setAttribute('data-currency', currency);

        section.innerHTML = `
          <div class="currency-header">
            <h3>${currency}</h3>
            <p><strong>Total Divisa:</strong> ${originalDivisa.toLocaleString('es-MX', { style: 'currency', currency: 'MXN' })} | 
            <strong>Total MN:</strong> ${originalMN.toLocaleString('es-MX', { style: 'currency', currency: 'MXN' })}</p>
          </div>
          <div class="clientEntries"></div>
          <button class="addClientBtn" type="button">Agregar Cliente</button>
          <div class="calculosResultado"></div>
        `;
        container.appendChild(section);

        section.querySelector('.addClientBtn').addEventListener('click', () => {
          addClientEntry(section);
        });
      }
    }

    // Agregar línea de cliente (con campo para nombre)
    function addClientEntry(section) {
      const clientEntries = section.querySelector('.clientEntries');
      const entryDiv = document.createElement('div');
      entryDiv.classList.add('client-entry');
      entryDiv.innerHTML = `
        <input type="text" class="clientName" placeholder="Nombre del Cliente">
        <input type="number" class="invoiceQuantity" placeholder="Cantidad" step="any">
        <input type="number" class="invoicePrice" placeholder="Precio" step="any">
        <button type="button" class="removeClientBtn">X</button>
      `;
      entryDiv.querySelector('.removeClientBtn').addEventListener('click', () => {
        clientEntries.removeChild(entryDiv);
      });
      clientEntries.appendChild(entryDiv);
    }

    // Al pulsar "Procesar Todas las Divisas"
    document.getElementById('processAllBtn').addEventListener('click', () => {
      if (!workbook || !sheet) {
        alert("Primero carga un archivo Excel.");
        return;
      }
      
      // Leer datos de encabezado de la empresa (G1, G3, G7)
      const razonSocial = sheet["G1"] ? sheet["G1"].v : "";
      const movimiento = sheet["G3"] ? sheet["G3"].v : "";
      const rangoRecha = sheet["G7"] ? sheet["G7"].v : "";
      
      const sections = document.querySelectorAll('.currency-section');
      const summaryResults = []; // Datos por divisa
      const clientDetails = [];  // Detalle de cada cliente
      
      sections.forEach(section => {
        const currency = section.getAttribute('data-currency');
        const mapping = currencyMapping[currency];
        const cellDivisa = sheet[mapping.divisa];
        const cellMN = sheet[mapping.mn];
        if (!cellDivisa || !cellMN) return;
        const originalDivisa = parseMexicanNumber(cellDivisa.v);
        const originalMN = parseMexicanNumber(cellMN.v);
        
        let sumQuantity = 0;
        let sumInvoiceMN = 0;
        const clientEntries = section.querySelectorAll('.client-entry');
        clientEntries.forEach(entry => {
          const clientName = entry.querySelector('.clientName').value;
          const qty = parseFloat(entry.querySelector('.invoiceQuantity').value) || 0;
          const price = parseFloat(entry.querySelector('.invoicePrice').value) || 0;
          sumQuantity += qty;
          sumInvoiceMN += qty * price;
          clientDetails.push({
            Divisa: currency,
            NombreCliente: clientName,
            Cantidad: qty,
            Precio: price,
            FacturaCliente: qty * price
          });
        });
        
        const facturaCliente = sumInvoiceMN;
        const remainingDivisa = originalDivisa - sumQuantity;
        const remainingMN = originalMN - sumInvoiceMN;
        const nuevaTasa = remainingDivisa !== 0 ? parseFloat((remainingMN / remainingDivisa).toFixed(5)) : 0;
        const facturaPublico = remainingDivisa * nuevaTasa;
        const totalPesos = facturaCliente + facturaPublico;
        
        // Actualizar celdas del Excel con nuevo monto y formato de moneda
        sheet[mapping.divisa].v = remainingDivisa;
        sheet[mapping.divisa].z = '$#,##0.00';
        sheet[mapping.mn].v = remainingMN;
        sheet[mapping.mn].z = '$#,##0.00';
        
        // Mostrar resultados en la sección (formateados en MX)
        const resultadosDiv = section.querySelector('.calculosResultado');
        resultadosDiv.innerHTML = `
          <p><strong>Factura Cliente (MN):</strong> ${facturaCliente.toLocaleString('es-MX', { style: 'currency', currency: 'MXN' })}</p>
          <p><strong>Divisa Restante:</strong> ${remainingDivisa.toLocaleString('es-MX', { style: 'currency', currency: 'MXN' })}</p>
          <p><strong>MN Restante:</strong> ${remainingMN.toLocaleString('es-MX', { style: 'currency', currency: 'MXN' })}</p>
          <p><strong>Nueva Tasa:</strong> ${nuevaTasa.toFixed(5)}</p>
          <p><strong>Factura Público:</strong> ${facturaPublico.toLocaleString('es-MX', { style: 'currency', currency: 'MXN' })}</p>
          <p><strong>Total Pesos (Clientes + Público):</strong> ${totalPesos.toLocaleString('es-MX', { style: 'currency', currency: 'MXN' })}</p>
        `;
        
        summaryResults.push({
          Divisa: currency,
          FacturaCliente: facturaCliente,
          DivisaRestante: remainingDivisa,
          MNRestante: remainingMN,
          NuevaTasa: nuevaTasa,
          FacturaPublico: facturaPublico,
          TotalPesos: totalPesos
        });
      });
      
      // Calcular el total general de todos los pesos
      const overallTotal = summaryResults.reduce((acc, item) => acc + item.TotalPesos, 0);
      
      // Mostrar encabezados y resumen en la página
      let headerHTML = `<h2>Información de la Empresa</h2>
        <p><strong>Razón Social:</strong> ${razonSocial}</p>
        <p><strong>Movimiento:</strong> ${movimiento}</p>
        <p><strong>Rango Recha:</strong> ${rangoRecha}</p>`;
      
      let resumenHTML = `<h2>Resumen de Resultados por Divisa</h2>
      <table>
        <thead>
          <tr>
            <th>Divisa</th>
            <th>Factura Cliente</th>
            <th>Divisa Restante</th>
            <th>MN Restante</th>
            <th>Nueva Tasa</th>
            <th>Factura Público</th>
            <th>Total Pesos</th>
          </tr>
        </thead>
        <tbody>`;
      summaryResults.forEach(item => {
        resumenHTML += `<tr>
          <td>${item.Divisa}</td>
          <td>${item.FacturaCliente.toLocaleString('es-MX', { style: 'currency', currency: 'MXN' })}</td>
          <td>${item.DivisaRestante.toLocaleString('es-MX', { style: 'currency', currency: 'MXN' })}</td>
          <td>${item.MNRestante.toLocaleString('es-MX', { style: 'currency', currency: 'MXN' })}</td>
          <td>${item.NuevaTasa.toFixed(5)}</td>
          <td>${item.FacturaPublico.toLocaleString('es-MX', { style: 'currency', currency: 'MXN' })}</td>
          <td>${item.TotalPesos.toLocaleString('es-MX', { style: 'currency', currency: 'MXN' })}</td>
        </tr>`;
      });
      resumenHTML += `</tbody></table>
      <p><strong>Total General de Pesos:</strong> ${overallTotal.toLocaleString('es-MX', { style: 'currency', currency: 'MXN' })}</p>`;
      
      document.getElementById('resultSummary').innerHTML = headerHTML + resumenHTML;
      
      // Mostrar tabla de clientes en la página
      let clientHTML = `<h2>Detalles de Clientes</h2>
      <table>
        <thead>
          <tr>
            <th>Divisa</th>
            <th>Nombre Cliente</th>
            <th>Cantidad</th>
            <th>Precio</th>
            <th>Factura Cliente</th>
          </tr>
        </thead>
        <tbody>`;
      clientDetails.forEach(item => {
        clientHTML += `<tr>
          <td>${item.Divisa}</td>
          <td>${item.NombreCliente}</td>
          <td>${item.Cantidad}</td>
          <td>${item.Precio.toLocaleString('es-MX', { style: 'currency', currency: 'MXN' })}</td>
          <td>${item.FacturaCliente.toLocaleString('es-MX', { style: 'currency', currency: 'MXN' })}</td>
        </tr>`;
      });
      clientHTML += `</tbody></table>`;
      document.getElementById('clientTableContainer').innerHTML = clientHTML;
      
      // Crear hoja "Resumen" para exportar: encabezados seguidos de la tabla resumen y la fila del total general
      const summaryHeaders = ["Divisa", "FacturaCliente", "DivisaRestante", "MNRestante", "NuevaTasa", "FacturaPublico", "TotalPesos"];
      let summarySheet = XLSX.utils.json_to_sheet(summaryResults, { header: summaryHeaders });
      // Agregar encabezados de empresa al inicio (como filas superiores)
      const headerInfo = [
        ["Razón Social", razonSocial],
        ["Movimiento", movimiento],
        ["Rango Recha", rangoRecha],
        []  // fila en blanco
      ];
      XLSX.utils.sheet_add_aoa(summarySheet, headerInfo, {origin: 0});
      
      // Agregar una fila final con el total general
      const totalRow = ["Total General de Pesos", "", "", "", "", "", overallTotal];
      XLSX.utils.sheet_add_aoa(summarySheet, [totalRow], {origin: -1});
      
      // Aplicar formato a las columnas en la hoja resumen
      const summaryRange = XLSX.utils.decode_range(summarySheet['!ref']);
      for (let R = headerInfo.length + 1; R <= summaryRange.e.r - 1; ++R) {
        // Columna B: FacturaCliente
        let cell = summarySheet[XLSX.utils.encode_cell({c:1, r:R})];
        if(cell && typeof cell.v === 'number') cell.z = '$#,##0.00';
        // Columna C: DivisaRestante
        cell = summarySheet[XLSX.utils.encode_cell({c:2, r:R})];
        if(cell && typeof cell.v === 'number') cell.z = '$#,##0.00';
        // Columna D: MNRestante
        cell = summarySheet[XLSX.utils.encode_cell({c:3, r:R})];
        if(cell && typeof cell.v === 'number') cell.z = '$#,##0.00';
        // Columna E: NuevaTasa (5 decimales)
        cell = summarySheet[XLSX.utils.encode_cell({c:4, r:R})];
        if(cell && typeof cell.v === 'number') cell.z = '0.00000';
        // Columna F: FacturaPublico
        cell = summarySheet[XLSX.utils.encode_cell({c:5, r:R})];
        if(cell && typeof cell.v === 'number') cell.z = '$#,##0.00';
        // Columna G: TotalPesos
        cell = summarySheet[XLSX.utils.encode_cell({c:6, r:R})];
        if(cell && typeof cell.v === 'number') cell.z = '$#,##0.00';
      }
      
      const summaryWorkbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(summaryWorkbook, summarySheet, "Resumen");
      const summaryExcel = XLSX.write(summaryWorkbook, { bookType: 'xlsx', type: 'array' });
      const blobSummary = new Blob([summaryExcel], { type: "application/octet-stream" });
      const urlSummary = URL.createObjectURL(blobSummary);
      
      // Mantener el Excel actualizado original para descarga
      const updatedExcel = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
      const blobUpdated = new Blob([updatedExcel], { type: "application/octet-stream" });
      const urlUpdated = URL.createObjectURL(blobUpdated);
      
      // Mostrar enlaces de descarga
      document.getElementById('downloadLinks').innerHTML = `
        <p><a href="${urlUpdated}" download="Excel_Actualizado.xlsx">Descargar Excel Actualizado</a></p>
        <p><a href="${urlSummary}" download="Resumen_Compacto.xlsx">Descargar Resumen Compacto</a></p>
      `;
    });
  </script>
</body>
</html>
